#!/bin/bash
# BOCK - Back Mocking System
# Programmer: Nick Wertzberger
# Website: ideaheap.com

function bockMockSpy {
    local FUNC_NAME=$1
    eval local FUNC_CALLS=\${MOCKED_CALLS_$FUNC_NAME}
    if [[ -z $FUNC_CALLS ]]
    then
        eval MOCKED_CALLS_$FUNC_NAME=1
    else
        echo $FUNC_CALLS
        eval MOCKED_CALLS_$FUNC_NAME=$(expr $FUNC_CALLS + 1)
    fi
    eval MOCKED_$FUNC_NAME[MOCKED_CALLS_$FUNC_NAME]="$@"
}

function verify {
    local numCalls=-1
    local callToCheck=""
    local callArgs=""
    while true
    do
        local arg=$1
        shift
        case "${arg}" in
        "--times")
            numCalls="$1"
            shift;;
        "") break;;
        *)  [ -z $callToCheck ] && callToCheck=$arg ||
            callArgs="$callArgs $arg";;
        esac
    done
    local fullCall="$callToCheck $callArgs"

    # remove spaces
    fullCall=${fullCall%% *}

    # Get spy data
    eval local calls=\$MOCKED_CALLS_$callToCheck
    [ -z $calls ] && calls=0
    local callMatches=0
    for (( i=1; i<=$calls; i++ ))
    do
        eval local testCall=\${MOCKED_$callToCheck[$i]}
        if [[ $testCall == $fullCall ]]
        then
            callMatches=$(expr $callMatches + 1)
        fi
    done

    # Test Spy data
    if [[ $numCalls == -1 && $callMatches > 0 ]]
    then
        return 0
    elif [[ $callMatches == $numCalls ]]
    then
        return 0
    elif [[ $numCalls == -1 ]]
    then
        echo "ERROR: Wanted but not invoked. '$fullCall'" 1>&2
        return 1
    else
        echo "ERROR: Expected $numCalls times but was $callMatches: '$fullCall'" 1>&2
        return 1
    fi
}

function resetMocks {
    local FUNC=$1
    eval MOCKED_CALLS_$FUNC=
}

# Task alias all passed in functions to mockSpy
shopt -s expand_aliases
for x in $@
do
    alias $x="bockMockSpy $x"
done

